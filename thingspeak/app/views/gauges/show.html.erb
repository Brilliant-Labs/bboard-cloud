<!DOCTYPE html>
<html style="height: 100%;">
  <head>
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
    <script src="http://code.highcharts.com/highcharts.js"></script>
    <script src="http://code.highcharts.com/highcharts-more.js"></script>
    <script src="http://code.highcharts.com/modules/exporting.js"></script>

    <%= javascript_include_tag 'application' %>

      <script type="text/javascript">

        // user's timezone offset
        var myOffset = new Date().getTimezoneOffset();

        // converts date format from JSON
        function getChartDate(d) {
          // offset in minutes is converted to milliseconds and subtracted so that chart's x-axis is correct
          return Date.parse(d) - (myOffset * 60000);
        }

        $(document).on('page:load ready', function() {
          // blank array for holding chart data
          var chartData = [];
          // variable for the local date in milliseconds
          var localDate;
          // variable for the last date added to the chart
          var last_date;

          // get the data with a webservice call
          $.getJSON('<%= "#{@domain}channels/#{params[:channel_id]}/field/#{params[:id]}.json?callback=?&offset=0#{@qs}" %>', function(data) {

            // if no access
            if (data == '-1') { $('#chart-container').append('<%= t(:chart_no_access) %>'); }

            // iterate through each feed
            $.each(data.feeds, function() {
               var p = new Highcharts.Point();
               // set the proper values
               var v = this.field<%= params[:id] %>;
               p.x = getChartDate(this.created_at);
               p.y = parseFloat(v);
               // add location if possible
               if (this.location) { p.name = this.location; }
               // if a numerical value exists add it
               if (!isNaN(parseInt(v))<% if params[:max].present? && Feed.numeric?(params[:max]) %> && p.y <= <%= params[:max] %><% end %><% if params[:min].present? && Feed.numeric?(params[:min]) %> && p.y >= <%= params[:min] %><% end %>) { chartData.push(p); }
            });

            // specify the chart options
            var chartOptions = {
              chart: {
                    defaultSeriesType: 'gauge',
                    renderTo: 'chart-container',
                    plotBackgroundColor: null,
                    plotBackgroundImage: null,
                    plotBorderWidth: 0,
                    plotShadow: false,
                    events: {
                      load: function() {

                        var url = '<%= "#{@domain}channels/#{params[:channel_id]}/feed/last.json?callback=?&offset=0&location=true#{@qs}" %>' ;

                          // push data every 5 seconds
                          setInterval(function() {
                            // get the data with a webservice call if we're just getting the last channel
                            $.getJSON(url, function(data) {
                                var p = new Highcharts.Point();
                                // set the proper values
                                var v = data.field<%= params[:id] %>;

                                p.x = getChartDate(data.created_at);
                                p.y = parseFloat(v);
                                // get the last date if possible

                                dynamicChart.series[0].data[dynamicChart.series[0].data.length-1].update(p);
                          });

                      }, 5000);
                }
                  }
                },

                title: {
                    text: ''
                },

                pane: {
                    startAngle: -150,
                    endAngle: 150,
                    background: [{
                        backgroundColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                            stops: [
                                [0, '#FFF'],
                                [1, '#333']
                            ]
                        },
                        borderWidth: 0,
                        outerRadius: '109%'
                    }, {
                        backgroundColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                            stops: [
                                [0, '#333'],
                                [1, '#FFF']
                            ]
                        },
                        borderWidth: 1,
                        outerRadius: '107%'
                    }, {
                        // default background
                    }, {
                        backgroundColor: '#DDD',
                        borderWidth: 0,
                        outerRadius: '105%',
                        innerRadius: '103%'
                    }]
                },

                // the value axis
                yAxis: {
                    min: 0,
                    max: 200,

                    minorTickInterval: 'auto',
                    minorTickWidth: 1,
                    minorTickLength: 10,
                    minorTickPosition: 'inside',
                    minorTickColor: '#666',

                    tickPixelInterval: 30,
                    tickWidth: 2,
                    tickPosition: 'inside',
                    tickLength: 10,
                    tickColor: '#666',
                    labels: {
                        step: 2,
                        rotation: 'auto'
                    },
                    title: {
                        text: 'km/h'
                    },
                    plotBands: [{
                        from: 0,
                        to: 120,
                        color: '#55BF3B' // green
                    }, {
                        from: 120,
                        to: 160,
                        color: '#DDDF0D' // yellow
                    }, {
                        from: 160,
                        to: 200,
                        color: '#DF5353' // red
                    }]
                },

                series: [{
                    name: 'Speed',
                    data: [0],
                    tooltip: {
                        valueSuffix: ' km/h'
                    }
                }],

                credits: {
                      text: '易智云仪表',
                      href: '#',
                      style: { color: '#D62020' }
                  }
            };

            // add the data to the chart
            // chartOptions.series[0].data = chartData;

            // set chart labels here so that decoding occurs properly
            // chartOptions.title.text = <% if params[:title] %>decodeURIComponent('<%= u(params[:title]) %>')<% else %>data.channel.name<% end %>;
            // chartOptions.xAxis.title.text = <% if params[:xaxis] %>decodeURIComponent('<%= u(params[:xaxis]) %>')<% else %>'Date'<% end %>;
            // chartOptions.yAxis.title.text = <% if params[:yaxis] %>decodeURIComponent('<%= u(params[:yaxis]) %>')<% else %><%= "data.channel.field#{params[:id]}" %><% end %>;

            // draw the chart
            var dynamicChart = new Highcharts.Chart(chartOptions);

        // end getJSON success
        })
        // chained to getjson, on error
        .error(function() {
          $('#chart-container').html('Invalid Channel.');
        });

      }); // end document.ready

  </script>
</head>
<body style='background-color: <%= params[:bgcolor] ? params[:bgcolor] : 'white' %>; height: 100%; margin: 0; padding: 0;'>
  <div id="chart-container" style="<%= @width_style %> <%= @height_style %> display: block; position:absolute; bottom:0; top:0; left:0; right:0; margin: 5px 15px 15px 0; overflow: hidden;">
    <%= image_tag 'ajax-loader.gif', :style => "position: absolute; margin: auto; top: 0; left: 0; right: 0; bottom: 0;" %>
  </div>
</body>
</html>

